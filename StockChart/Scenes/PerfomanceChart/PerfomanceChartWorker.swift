//
//  PerfomanceChartWorker.swift
//  StockChart
//
//  Created by Dmitry Kuklin on 27/07/2020.
//  Copyright (c) 2020 DK. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

class PerfomanceChartWorker {
    
    func getWeekStockData(completionHandler: @escaping ([StockPerformanceModel]) -> Void, failure: @escaping (Error?) -> Void) {
        
            DispatchQueue.main.async {
                ApiManager.shared.getWeekData(success: { [weak self] (stocks) in
                    
                    self?.preparePerfomanceData(stocks, isHours: true, completionHandler: { (perfomanceData) in
                        completionHandler(perfomanceData)
                    }, failure: { (error) in
                        failure(error)
                    })

                }) { (error) in
                    failure(error)
                }
            }

    }
    
    func getMonthStockData(completionHandler: @escaping ([StockPerformanceModel]) -> Void, failure: @escaping (Error?) -> Void) {
        
            DispatchQueue.main.async {
                ApiManager.shared.getMonthData(success: { [weak self] (stocks) in
                    
                    self?.preparePerfomanceData(stocks, isHours: false, completionHandler: { (perfomanceData) in
                        completionHandler(perfomanceData)
                    }, failure: { (error) in
                        failure(error)
                    })

                }) { (error) in
                    failure(error)
                }
            }

    }
}

private extension PerfomanceChartWorker {
    func preparePerfomanceData(_ stocks: [QuoteSymbols], isHours: Bool, completionHandler: @escaping ([StockPerformanceModel]) -> Void, failure: @escaping (Error?) -> Void) {
        
        var perfonaceArray = [StockPerformanceModel]()
        
        var zeroPerfomancePoint: Double = 0
        
        for stock in stocks {
            zeroPerfomancePoint = stock.closures[0]
            
            let stockPerformance = StockPerformanceModel()
            stockPerformance.stockName = stock.symbol
            
            for datePoint in stock.timestamps {
                let date = isHours ? datePoint.timestampToStringDateHours() : datePoint.timestampToStringDate()
                stockPerformance.dates.append(date)
            }
            
            for price in stock.closures {
                stockPerformance.performancePoints.append(((price * 100) / zeroPerfomancePoint) - 100)
            }
            
            perfonaceArray.append(stockPerformance)
        }
        
        completionHandler(perfonaceArray)
    }
}
